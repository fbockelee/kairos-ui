#set ( $LCentityName = $fn.uncapitalize($entity.name) )
<!-- File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time ) --> 

<mat-card>
  	<mat-card-header>
      	<mat-card-title>
    		<h2 class="mdl-card__title-text">{{ title }}</h2>
      	</mat-card-title>
  	</mat-card-header>
 	<mat-card-content class="register-container">
  	<form [formGroup]="form" novalidate (ngSubmit)="save()">
    <div class="add-edit-form">
      <mat-grid-list cols="1" rowHeight="70px">
#foreach ( $attrib in $entity.attributes)
#if ($attrib.isDatabaseNotNull())
	#set ($requiredmode = "required ")
#else
	#set ($requiredmode = "")
#end
#if ($attrib.isKeyElement() && !$attrib.isFK())
        <mat-grid-tile [colspan]="1" [rowspan]="1">
          <mat-form-field class="form-full-width">
            <input matInput placeholder="${attrib.name}#if($attrib.isAutoIncremented())(disabled)#else #end" required maxlength="${attrib.databaseSize}" formControlName="${attrib.name}">
          </mat-form-field>
        </mat-grid-tile>
#elseif ($attrib.isDateType())
        <mat-grid-tile [colspan]="1" [rowspan]="1">
          <mat-form-field class="form-full-width">
            <input matInput [matDatepicker]="picker${attrib.name}" placeholder="${attrib.name}" ${requiredmode} formControlName="${attrib.name}">
            <mat-datepicker-toggle matSuffix [for]="picker${attrib.name}"></mat-datepicker-toggle>
            <mat-datepicker ${SHARP}picker${attrib.name}></mat-datepicker>
			#if ($attrib.isDatabaseNotNull())
            <mat-error *ngIf="!form.controls['${attrib.name}'].errors['required']">
              ${attrib.name} is required
            </mat-error>
			#end
          </mat-form-field>
        </mat-grid-tile>
#elseif ( $attrib.isFK() && $attrib.isKeyElement())
#set($referencedEntity = $fn.uncapitalize($attrib.referencedEntityName))
#set($keyAttrib = $attrib.referencedEntity.keyAttribute.name)
        <mat-grid-tile [colspan]="1" [rowspan]="1">
          <mat-select placeholder="${attrib.referencedEntityName}" formControlName="${attrib.name}" name="${referencedEntity}" class="form-full-width">
            <mat-option [value]="">
              N/A
            </mat-option>
            <mat-option *ngFor="let ${referencedEntity} of ${referencedEntity}sData" [value]="${referencedEntity}.$keyAttrib">
#foreach ( $refAttrib in $attrib.referencedEntity.attributes)
#if ($foreach.count < $attrib.referencedEntity.attributes.size())
#if ($refAttrib.isKeyElement())
#set($options = "{{ ${referencedEntity}.$keyAttrib }} | ")
#else
#set($options = $options + "{{ ${referencedEntity}.${refAttrib.name} }} - ")
#end
#else
#set($options = $options + "{{ ${referencedEntity}.${refAttrib.name} }}")
#end
#end
              $options
            </mat-option>
          </mat-select>
		 </mat-grid-tile>
#elseif ( $attrib.isFK() )
#set($referencedEntity = $fn.uncapitalize($attrib.referencedEntityName))
#set($keyAttrib = $attrib.referencedEntity.keyAttribute.name)
        <mat-grid-tile [colspan]="1" [rowspan]="1">
          <mat-select placeholder="${attrib.referencedEntityName}" formControlName="${attrib.name}" name="${referencedEntity}" class="form-full-width">
            <mat-option [value]="">
              N/A
            </mat-option>
            <mat-option *ngFor="let ${referencedEntity} of ${referencedEntity}sData" [value]="${referencedEntity}.$keyAttrib">
#foreach ( $refAttrib in $attrib.referencedEntity.attributes)
#if ($foreach.count < $attrib.referencedEntity.attributes.size())
#if ($refAttrib.isKeyElement())
#set($options = "{{ ${referencedEntity}.$keyAttrib }} | ")
#else
#set($options = $options + "{{ ${referencedEntity}.${refAttrib.name} }} - ")
#end
#else
#set($options = $options + "{{ ${referencedEntity}.${refAttrib.name} }}")
#end
#end
              $options
            </mat-option>
          </mat-select>
        </mat-grid-tile>
#else
       <mat-grid-tile [colspan]="1" [rowspan]="1">
          <mat-form-field class="form-full-width">
            <input matInput placeholder="${attrib.name}" ${requiredmode} maxlength="${attrib.databaseSize}" formControlName="${attrib.name}">
			#if ($attrib.isDatabaseNotNull())
            <mat-error *ngIf="!form.controls.${attrib.name}.valid">
              ${attrib.name} is required
            </mat-error>
			#end
          </mat-form-field>
        </mat-grid-tile>	
#end
#end
      </mat-grid-list>
    </div>
    <mat-card-actions>
        <button mat-raised-button type="button" class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button" (click)="initForm()">
          Vider
        </button>
        <button mat-raised-button type="submit" class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--primary" [disabled]="!form.valid">
          Sauvegarder
        </button>
#set ($entityNameprefix = "!${LCentityName}?.")
        <button mat-raised-button type="button" [disabled]="${entity.keyAttributesNamesAsString(' && ', $entityNameprefix, '')}" class="mdl-button mdl-js-button mdl-js-ripple-effect mdl-button--accent" (click)="deleteConfirmation()">
          Supprimer
        </button>
    </mat-card-actions>
  	</form>
  	</mat-card-content>
  <div class="mdl-card__menu">
    <a mat-raised-button class="card-header-button" [routerLink]="['/${LCentityName}-list']">${entity.name} list</a>
  </div>
</mat-card>