#parse("include/entitiesNamesRef.vm")
#set( $jdbcTool = $loader.newInstance("JdbcTool") )
$jdbcTool.setAllFromConfig($project.specificVariables)##
$jdbcTool.setOrderby("ORDER BY ext2, ext4, ext3")##
#set( $extAttributes=$jdbcTool.getExtFieldAttributes($entity))
#set ( $LCentityName = $fn.uncapitalize($entity.name) )
#set ( $LCentityNameWithDot = $fn.uncapitalize($entity.name) + "." )
#set ( $_entityService = "_" + $fn.uncapitalize($baseServiceName) )
// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

// Models and services imports
import { $entity.name } from './../$fn.uncapitalize($LCentityNameModel)';
import { $baseServiceName } from './../services/$fn.uncapitalize($LCentityNameService)';
#set($attrsFKs = [])
#foreach ($attribute in $entity.attributes)
#if ($attribute.isFK())
#if( $attrsFKs.add($attribute.referencedEntityName) )#end
#set($referencedEntity = $attribute.referencedEntityName)
import { ${referencedEntity} } from './../../${fn.uncapitalize($referencedEntity)}/${fn.uncapitalize($referencedEntity)}.model';
import { ${referencedEntity}Service } from './../../${fn.uncapitalize($referencedEntity)}/services/${fn.uncapitalize($referencedEntity)}.service';
#end
#end
import * as _ from 'underscore';

// Pour gestion des listes
#if ($entity.name != 'Liste')
import { ListeService } from './../../../entities/liste/services/liste.service';
import { Liste } from './../../../entities/liste/liste.model';
#end

import { Lov } from './../../../common/lov';
import {SelectItem} from 'primeng/api';

@Component({
  selector: 'app-${LCentityName}-form',
  templateUrl: './${LCentityName}-form.component.html',
  styleUrls: ['./${LCentityName}-form.component.css'],
  providers: [DatePipe]
})
export class $formComponentName extends Lov implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  public title = 'Formulaire ${entity.name}';
  public form: FormGroup;

  // Définition des filtres
#foreach ( $extattrib in $extAttributes)
#if ($extattrib.type=='fieldlink')
  public filter_${extattrib.columnname}:string;
#end
#end

  public $LCentityName: ${entity.name};
  private ids;

  // Définition des LOV
#foreach ( $extattrib in $extAttributes)
#if ($extattrib.ext7!='')
  public listOf${extattrib.ext7}_itm: SelectItem[];
#end
#end

#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
  // $entitiesFK Select
  private ${fn.uncapitalize($entitiesFK)}sData: ${entitiesFK}[];
  private selected${entitiesFK}Id: number;

#end
#end
  constructor(
#if ($entity.name != 'Liste')
	private _listeService: ListeService,         // Pour gestion des listes
#end 
#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
    private _${fn.uncapitalize($entitiesFK)}Service: ${entitiesFK}Service,
#end
#end
    private $_entityService: $baseServiceName,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService,
    public dialog: MatDialog) {
		super(_listeService,_notificationService);
 	}

  ngOnInit() {
    this.getIdFromRouteParams();
#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
    this.fetch${entitiesFK}s();
#end
#end
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

#if ($attrsFKs.size() > 0)
#foreach ( $entitiesFK in $attrsFKs)
  fetch${entitiesFK}s = () => {
    this._${fn.uncapitalize($entitiesFK)}Service.getAll().subscribe(
      (data: ${entitiesFK}[]) => this.${fn.uncapitalize($entitiesFK)}sData = data,
      error => console.error(error));
  }

#end
#end
  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }

	/* Chargement des LOVs */
#foreach ( $extattrib in $extAttributes)
#if ($extattrib.ext7!='')
	this.getLOV ('${extattrib.ext7}').then(data_itm => {
		this.listOf${extattrib.ext7}_itm = data_itm; 
	});
#end
#end
  }

  getNewForm = (${LCentityName}?: ${entity}) => {
    return {
#set ( $validator = "" )
#foreach ( $attrib in $entity.attributes)
#if ($foreach.count < $entity.attributes.size())
#if ($attrib.isKeyElement() && $attrib.isFK())
      ${attrib.name}: [
        (${LCentityName} ? ${LCentityName}.${attrib.name} : ''),
        Validators.required
      ],
#elseif ($attrib.isKeyElement())
      ${attrib.name}: #if($attrib.isAutoIncremented())[{
          value: (${LCentityName} ? ${LCentityName}.${attrib.name} : ''),
          disabled: true
      }],#else[
          (${LCentityName} ? ${LCentityName}.${attrib.name} : ''),
          Validators.required
      ],
#end
#else
      ${attrib.name}: [
#if($attrib.isDateType())
#set ( $checkEntity = "(${LCentityName} ? ${LCentityName}.${attrib.name} : null)" )
#else
#set ( $checkEntity = "(${LCentityName} ? ${LCentityName}.${attrib.name} : '')" )
#end
#if ($attrib.isNotNull())
#set ( $checkEntity =  $checkEntity + "," )
#set ( $validator = "Validators.required" )
#end
        $checkEntity
#if ($validator != "")
        $validator
#end
      ],
#set ( $validator = "" )
#end
#else
#if ($attrib.isKeyElement() && $attrib.isFK())
      ${attrib.name}: [
        (${LCentityName} ? ${LCentityName}.${attrib.name} : ''),
        Validators.required
      ]
#elseif ($attrib.isKeyElement())
      ${attrib.name}: [{
        value: (${LCentityName} ? ${LCentityName}.${attrib.name} : ''),
        disabled: true
      }]
#else
      ${attrib.name}: [
#set ( $validator = "" )
#if ($attrib.isDateType())
#set ( $checkEntity = "(${LCentityName} ? ${LCentityName}.${attrib.name} : null)" )
#else
#set ( $checkEntity = "(${LCentityName} ? ${LCentityName}.${attrib.name} : '')" )
#end
#if ($attrib.isNotNull())
#set ( $checkEntity =  $checkEntity + "," )
#set ( $validator = "Validators.required" )
#end
        $checkEntity
#if ($validator != "")
        $validator
#end
      ]
#set ( $validator = "" )
#end
#end
#end
    };
  }


  load = () => {
	// Concaténer les ids mais séparé par / et non ,
	var param : String = '';
	
	for (var i=0;i<this.ids.length;i++) {
		param = param + this.ids[i];
		if (i != (this.ids.length-1)) {
			param = param + '/';
		}
	}
    this.${_entityService}.get(param).subscribe(
      ($LCentityName: ${entity.name}) => {
#set ($entityObjectMapping = "")
#foreach ( $attrib in $entity.attributes)
#if ($foreach.count < $entity.attributes.size())
#if (!$attrib.isDateType())
#set ($entityObjectMapping = $entityObjectMapping + "${attrib.name}: ${LCentityName}.${attrib.name},
          " )
#else
#set ($entityObjectMapping = $entityObjectMapping + "${attrib.name}: new Date(${LCentityName}.${attrib.name}),
          " )
#end
#else
#if (!$attrib.isDateType())
#set ($entityObjectMapping = $entityObjectMapping + "${attrib.name}: ${LCentityName}.${attrib.name}" )
#else
#set ($entityObjectMapping = $entityObjectMapping + "${attrib.name}: new Date(${LCentityName}.${attrib.name})" )
#end
#end
#end
        this.${LCentityName} = ${LCentityName};
        this.form = this._formBuilder.group(this.getNewForm(this.${LCentityName}));
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
 	  },
      () => {
		// Valorisation des filtres
#foreach ( $extattrib in $extAttributes)
#if ($extattrib.type=='fieldlink')
		this.filter_${extattrib.columnname} = JSON.stringify([{key: '${extattrib.ext4.split(",")[1]}', value: this.${LCentityName}.${extattrib.ext4.split(",")[0]}},]);
#end
#end
      });
  }

  save = () => {
	// If we didn't get a ${LCentityName}, we are adding a ${LCentityName}
    if (!this.${LCentityName}) {
      this.add();
    } else { // If we didn't get a ${LCentityName}, we are adding a ${LCentityName}
      this.update();
    }
  }

  add = () => {
    this.${_entityService}.create(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', '${entity.name} added successfuly');
        this._router.navigate(['./${LCentityName}-form', ${entity.keyAttributesNamesAsString(', ', 'this.form.value.', '')}]);
      },
      error => {1
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
	Object.assign(this.$LCentityName,this.form.value);
    this.${_entityService}.update(this.$LCentityName).subscribe(
      result => this._notificationService.success('Success', '${entity.name} edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  deleteConfirmation = () => {
#set ($entityDeletePrefix = "this.${LCentityName}.")
#set ($entityDeleteDialogPrefix = "${DOLLAR}{this.${LCentityName}.")
    if (${entity.keyAttributesNamesAsString(' && ', $entityDeletePrefix, '')}) {
      const dialogRef = this.dialog.open(DeleteDialogComponent, {
        data: `$LCentityName: ${entity.keyAttributesNamesAsString(', ', $entityDeleteDialogPrefix, '}')}`
      });
      dialogRef.afterClosed().subscribe(result => {
        if (result) {
          this.deleteBadge(this.$LCentityName);
        }
      });
    }
  }

  deleteBadge = ($LCentityName: ${entity.name}): void => {
    // Call delete service
    this._${LCentityName}Service.delete($LCentityName).subscribe(
      result => {
        this._router.navigate(['./${LCentityName}-list']);

        this._notificationService.success(
          'Deleted',
#set ($entityDeleteNotificationPrefix = "${DOLLAR}{")
         // `The ${LCentityName} entry with the id(s)='${entity.keyAttributesNamesAsString(', ', $entityDeleteNotificationPrefix, '}')}' was deleted successfuly`);
 		`The ${LCentityName} entry with the id= was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }
}
