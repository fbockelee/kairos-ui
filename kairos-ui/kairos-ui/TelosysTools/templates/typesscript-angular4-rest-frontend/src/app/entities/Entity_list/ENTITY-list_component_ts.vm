##
#set( $jdbcTool = $loader.newInstance("JdbcTool") )
$jdbcTool.setAllFromConfig($project.specificVariables)##
$jdbcTool.setOrderby("ORDER BY ext6")##
#set( $extAttributes=$jdbcTool.getExtFieldAttributes($entity))
##
#parse("include/entitiesNamesRef.vm")
// File generated by $generator.name ( version $generator.version ) - Date $today.date("yyyy-MM-dd") ( Time $today.time )
$env.setLanguage('TypeScript')
#set ( $LCentityName = $fn.uncapitalize($entity.name) )
#set ( $_entityService = "_" + $fn.uncapitalize($baseServiceName) )
// Modules imports
import { Component, OnInit, OnChanges, Input } from '@angular/core';
import { Router } from '@angular/router';
import { ActivatedRoute  } from '@angular/router';
import { MatDialog } from '@angular/material';

// Services imports
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { $baseServiceName } from './../services/$fn.uncapitalize($LCentityNameService)';
import { ApplicationStateService } from './../../../services/application-state.service';

// Models imports
import { $entity.name } from '../$fn.uncapitalize($LCentityNameModel)';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

// Ajout primeng
import {TableModule} from 'primeng/table';
import {PaginatorModule} from 'primeng/paginator';

@Component({
  selector: 'app-${LCentityName}-list',
  templateUrl: './${LCentityName}-list.component.html',
  styleUrls: ['./${LCentityName}-list.component.css'],
  providers: [DatePipe]
})
export class $listComponentName implements OnInit, OnChanges {

  public title = 'Liste de ${entity.name}s';

  public listOf${entity.name}s: ${entity}[];


  _filter : string;
  @Input('filter') 
  set filter(value:string) {
	 this._filter = value;
     this.getAll${entity.name}s();
  }

  get filter():string {
	return this._filter
  }

  @Input() createenable?: boolean = true;
  @Input() deleteenable?: boolean = true;
  @Input() updateenable?: boolean = true;
  @Input() incard?: boolean = true;

  private listId = '$fn.toUpperCase(${entity.name})_COMPONENT_LIST';

  private $LCentityName: $entity.name;

  private columnDefinitions = [
#foreach ( $extattrib in $extAttributes)
#set ($attrib = $entity.attributes.get($extattrib.index))
#if ($extattrib.ext6 == "")
      { def: '${extattrib.columnname}', showMobile: true, display:'none', index:$foreach.index},
#else
      { def: '${extattrib.columnname}', showMobile: true, display:'table-cell', index:$foreach.index},
#end
#end
	];

  constructor(
    private $_entityService: $baseServiceName,
    private _router: Router,
    private _notificationService: NotificationService,
    public dialog: MatDialog,
	private _route: ActivatedRoute) { }

  ngOnInit() {
    // On init get all ${entity.name}s
    //this.getAll${entity.name}s();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh ${entity.name} list
    EmitterService.get(this.listId).subscribe((data: ${entity.name}[]) => this.getAll${entity.name}s());
  }

  ngOnChanges() { }


  /**
   * Get displayed columns (responsive)
   */
  getDisplayedColumns(): string[] {
	  const isMobile = ApplicationStateService.getIsMobileResolution();
	  return this.columnDefinitions
	    .filter(cd => !isMobile || cd.showMobile)
	    .map(cd => cd.def);
	}

  /**
   * Get all ${entity.name} using the service ${entity.name}Service
   */
  getAll${entity.name}s = (): void => {

	var options:any = { notPaged: true };
	
	if (this.filter) {
		if (this.filter == 'FULL') {
			options = { notPaged: true };
		}
		else {
			var filters = JSON.parse(this.filter);
			options = {params: filters,
						   notPaged: true};
		}

    	this._${LCentityName}Service.getAll(options).subscribe(
      		(data: ${entity.name}[]) => {
        		this.listOf${entity.name}s = data;
      		},
      	error => {
        	this._notificationService.error(
          	'Error',
          	'An error occured when trying to reach the server');
    	});
	}
  }

  edit${entity.name} = ($entity.keyAttributesNamesAsString(', ')): void => {
    // Navigate to $LCentityName form component
    this.goTo${entity.name}Form($entity.keyAttributesNamesAsString(', '));
  }

  delete${entity.name} = ($entity.keyAttributesNamesAsString(', ')): void => {

    const promise = new Promise((resolve, reject) => {
		// Call get service
		this.${_entityService}.get($entity.keyAttributesNamesAsString(', ')).subscribe(
        		($LCentityName: $entity.name) => {
          							this.$LCentityName = $LCentityName;
          							resolve('done');
        						},
				error => {
          					this._notificationService.error(error.statusText, 'Error delete');
            				reject('error');
        				 });
	})
    .then(() => {
    	// Call delete service
    	this.${_entityService}.delete(this.$LCentityName).subscribe(
      			result => {
       						 // Notify ${entity.name} list to refresh
        					EmitterService.get(this.listId).emit(result);

        					this._notificationService.success(
          					'Deleted',
          					`The $LCentityName entry with the id='$entity.keyAttributesNamesAsString(', ', '${', '}')' was deleted successfuly`);
     					  },
      			error => {
        					this._notificationService.error(
          					'Error',
          					'An error occured when trying to reach the server');
      					  });
  	})
  }

  goTo${entity.name}Form($entity.keyAttributesNamesAsString(', ')) {
#set ($paramGoto = "$entity.keyAttributesNamesAsString(', ')")
#if (${LCentityName} == "calendrier")
#set ($paramGoto = "${paramGoto}.toISOString()")
#end
    this._router.navigate(['./${LCentityName}-form', ${paramGoto}]);
  }

  deleteConfirmation = ($entity.keyAttributesNamesAsString(', ')) => {
    const dialogRef = this.dialog.open(DeleteDialogComponent, {
      data: `$LCentityName: $entity.keyAttributesNamesAsString(', ', '${', '}')`
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.delete${entity.name}($entity.keyAttributesNamesAsString(', '));
      }
    });
  }

}
