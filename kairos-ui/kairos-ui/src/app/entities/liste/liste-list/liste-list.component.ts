// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-04-13 ( Time 11:35:38 )

// Modules imports
import { Component, OnInit, OnChanges, Input } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material';

// Services imports
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { ListeService } from './../services/liste.service';
import { ApplicationStateService } from './../../../services/application-state.service';

// Models imports
import { Liste } from '../liste.model';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

// Ajout primeng
import {TableModule} from 'primeng/table';
import {PaginatorModule} from 'primeng/paginator';

@Component({
  selector: 'app-liste-list',
  templateUrl: './liste-list.component.html',
  styleUrls: ['./liste-list.component.css'],
  providers: [DatePipe]
})
export class ListeListComponent implements OnInit, OnChanges {

  public title = 'Liste de Listes';

  public listOfListes: Liste[];
  private listId = 'LISTE_COMPONENT_LIST';

  private liste: Liste;

  private columnDefinitions = [
      { def: 'nomliste', showMobile: true },
      { def: 'codeelement', showMobile: true },
      { def: 'nomelement', showMobile: true },
      { def: 'ordretri', showMobile: true },
      { def: 'image', showMobile: true },
      { def: 'defaut', showMobile: true },
	];

  constructor(
    private _listeService: ListeService,
    private _router: Router,
    private _notificationService: NotificationService,
    public dialog: MatDialog) { }

  ngOnInit() {
    // On init get all Listes
    this.getAllListes();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh Liste list
    EmitterService.get(this.listId).subscribe((data: Liste[]) => this.getAllListes());
  }

  ngOnChanges() { }


  /**
   * Get displayed columns (responsive)
   */
  getDisplayedColumns(): string[] {
	  const isMobile = ApplicationStateService.getIsMobileResolution();
	  return this.columnDefinitions
	    .filter(cd => !isMobile || cd.showMobile)
	    .map(cd => cd.def);
	}

  /**
   * Get all Liste using the service ListeService
   */
  getAllListes = (): void => {
    this._listeService.getAll({ notPaged: true }).subscribe(
      (data: Liste[]) => {
        this.listOfListes = data;
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
    });
  }

  editListe = (nomliste, codeelement): void => {
    // Navigate to liste form component
    this.goToListeForm(nomliste, codeelement);
  }

  deleteListe = (nomliste, codeelement): void => {

    const promise = new Promise((resolve, reject) => {
		// Call get service
		this._listeService.get(nomliste, codeelement).subscribe(
        		(liste: Liste) => {
          							this.liste = liste;
          							resolve('done');
        						},
				error => {
          					this._notificationService.error(error.statusText, 'Error delete');
            				reject('error');
        				 });
	})
    .then(() => {
    	// Call delete service
    	this._listeService.delete(this.liste).subscribe(
      			result => {
       						 // Notify Liste list to refresh
        					EmitterService.get(this.listId).emit(result);

        					this._notificationService.success(
          					'Deleted',
          					`The liste entry with the id='${nomliste}, ${codeelement}' was deleted successfuly`);
     					  },
      			error => {
        					this._notificationService.error(
          					'Error',
          					'An error occured when trying to reach the server');
      					  });
  	})
  }

  goToListeForm(nomliste, codeelement) {
    this._router.navigate(['./liste-form', nomliste, codeelement]);
  }

  deleteConfirmation = (nomliste, codeelement) => {
    const dialogRef = this.dialog.open(DeleteDialogComponent, {
      data: `liste: ${nomliste}, ${codeelement}`
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.deleteListe(nomliste, codeelement);
      }
    });
  }

}
