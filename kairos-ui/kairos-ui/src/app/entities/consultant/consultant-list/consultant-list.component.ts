// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-02-07 ( Time 16:54:38 )

// Modules imports
import { Component, OnInit, OnChanges, Input } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material';

// Services imports
import { PagerService } from './../../../services/pager.service';
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { ConsultantService } from './../services/consultant.service';

// Models imports
import { Consultant } from '../consultant.model';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

@Component({
  selector: 'app-consultant-list',
  templateUrl: './consultant-list.component.html',
  styleUrls: ['./consultant-list.component.css'],
  providers: [DatePipe]
})
export class ConsultantListComponent implements OnInit, OnChanges {

  public title = 'Liste de Consultants';

  // pager object
  public pager: any = {};
  // paged items
  public pagedItems: any[];

  private listOfConsultants: Consultant[];
  private listId = 'CONSULTANT_COMPONENT_LIST';


  constructor(
    private _consultantService: ConsultantService,
    private _router: Router,
    private _notificationService: NotificationService,
    private pagerService: PagerService,
    public dialog: MatDialog) { }

  ngOnInit() {
    // On init get all Consultants
    this.getAllConsultants();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh Consultant list
    EmitterService.get(this.listId).subscribe((data: Consultant[]) => this.getAllConsultants());
  }

  ngOnChanges() { }

  /**
   * Get all Consultant using the service ConsultantService
   */
  getAllConsultants = (): void => {
    this._consultantService.getAll({ notPaged: true }).subscribe(
      (data: Consultant[]) => {
        this.listOfConsultants = data;
        this.setPage(1);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
    });
  }

  editConsultant = (consultantid): void => {
    // Navigate to consultant form component
    this.goToConsultantForm(consultantid);
  }

  deleteConsultant = (consultantid): void => {
    // Call delete service
    this._consultantService.delete(consultantid).subscribe(
      result => {
        // Notify Consultant list to refresh
        EmitterService.get(this.listId).emit(result);

        this._notificationService.success(
          'Deleted',
          `The consultant entry with the id='${consultantid}' was deleted successfuly`);
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
      });
  }

  goToConsultantForm(consultantid) {
    this._router.navigate(['./consultant-form', consultantid]);
  }

  deleteConfirmation = (consultantid) => {
    const dialogRef = this.dialog.open(DeleteDialogComponent, {
      data: `consultant: ${consultantid}`
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.deleteConsultant(consultantid);
      }
    });
  }

  setPage(page: number) {
    if (page < 1 || page > this.pager.totalPages) {
      return;
    }

    // get pager object from service
    this.pager = this.pagerService.getPager(this.listOfConsultants.length, page);

    // get current page of items
    this.pagedItems = this.listOfConsultants.slice(this.pager.startIndex, this.pager.endIndex + 1);
  }
}
