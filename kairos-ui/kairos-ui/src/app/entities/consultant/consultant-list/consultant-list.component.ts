// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-03-13 ( Time 17:11:43 )

// Modules imports
import { Component, OnInit, OnChanges, Input } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material';

// Services imports
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { ConsultantService } from './../services/consultant.service';
import { ApplicationStateService } from './../../../services/application-state.service';

// Models imports
import { Consultant } from '../consultant.model';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

import {ViewChild} from '@angular/core';
import {MatPaginator} from '@angular/material/paginator';
import {MatTableDataSource} from '@angular/material/table';

@Component({
  selector: 'app-consultant-list',
  templateUrl: './consultant-list.component.html',
  styleUrls: ['./consultant-list.component.css'],
  providers: [DatePipe]
})
export class ConsultantListComponent implements OnInit, OnChanges {

  public title = 'Liste de Consultants';

  @ViewChild(MatPaginator) paginator: MatPaginator;
  public dataSource: MatTableDataSource<Consultant>;

  private listOfConsultants: Consultant[];
  private listId = 'CONSULTANT_COMPONENT_LIST';

  private consultant: Consultant;

  private columnDefinitions = [
      { def: 'consultantid', showMobile: true },
      { def: 'nom', showMobile: true },
      { def: 'prenom', showMobile: true },
      { def: 'trigramme', showMobile: true },
      { def: 'userLogin', showMobile: true },
      { def: 'userPassword', showMobile: true },
      { def: 'adresse1', showMobile: true },
      { def: 'adresse2', showMobile: true },
      { def: 'telPortable', showMobile: true },
      { def: 'telTravail', showMobile: true },
      { def: 'telDomicile', showMobile: true },
      { def: 'codeprofil', showMobile: true },
      { def: 'datefin', showMobile: true },
      { def: 'email', showMobile: true },
      { def: 'datedebut', showMobile: true },
      { def: 'codepostal', showMobile: true },
      { def: 'ville', showMobile: true },
      { def: 'lieunaissance', showMobile: true },
      { def: 'datenaissance', showMobile: true },
      { def: 'telimei', showMobile: true },
      { def: 'telcontrat', showMobile: true },
      { def: 'telecheance', showMobile: true },
      { def: 'vehpersimmat', showMobile: true },
      { def: 'vehproimmat', showMobile: true },
      { def: 'vehproass', showMobile: true },
      { def: 'vehperscv', showMobile: true },
      { def: 'vehprocv', showMobile: true },
      { def: 'vehpermis', showMobile: true },
      { def: 'vehpersmodele', showMobile: true },
      { def: 'vehpromodele', showMobile: true },
      { def: 'vehprorevision', showMobile: true },
      { def: 'vehprotauxspec', showMobile: true },
      { def: 'ordmodele', showMobile: true },
      { def: 'orddate', showMobile: true },
      { def: 'ordmontantht', showMobile: true },
      { def: 'ordinfo', showMobile: true },
      { def: 'adslplaf', showMobile: true },
      { def: 'telpersplaf', showMobile: true },
      { def: 'trspkmsiege', showMobile: true },
      { def: 'trspnbkmsiege', showMobile: true },
      { def: 'trspcarte', showMobile: true },
      { def: 'societe', showMobile: true },
      { def: 'comptendf', showMobile: true },
	];

  constructor(
    private _consultantService: ConsultantService,
    private _router: Router,
    private _notificationService: NotificationService,
    public dialog: MatDialog) { }

  ngOnInit() {
    // On init get all Consultants
    this.getAllConsultants();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh Consultant list
    EmitterService.get(this.listId).subscribe((data: Consultant[]) => this.getAllConsultants());
  }

  ngOnChanges() { }


  /**
   * Get displayed columns (responsive)
   */
  getDisplayedColumns(): string[] {
	  const isMobile = ApplicationStateService.getIsMobileResolution();
	  return this.columnDefinitions
	    .filter(cd => !isMobile || cd.showMobile)
	    .map(cd => cd.def);
	}

  /**
   * Get all Consultant using the service ConsultantService
   */
  getAllConsultants = (): void => {
    this._consultantService.getAll({ notPaged: true }).subscribe(
      (data: Consultant[]) => {
        this.listOfConsultants = data;
        this.dataSource = new MatTableDataSource<Consultant>(this.listOfConsultants);
        this.dataSource.paginator = this.paginator;
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
    });
  }

  editConsultant = (consultantid): void => {
    // Navigate to consultant form component
    this.goToConsultantForm(consultantid);
  }

  deleteConsultant = (consultantid): void => {

    const promise = new Promise((resolve, reject) => {
		// Call get service
		this._consultantService.get(consultantid).subscribe(
        		(consultant: Consultant) => {
          							this.consultant = consultant;
          							resolve('done');
        						},
				error => {
          					this._notificationService.error(error.statusText, 'Error delete');
            				reject('error');
        				 });
	})
    .then(() => {
    	// Call delete service
    	this._consultantService.delete(this.consultant).subscribe(
      			result => {
       						 // Notify Consultant list to refresh
        					EmitterService.get(this.listId).emit(result);

        					this._notificationService.success(
          					'Deleted',
          					`The consultant entry with the id='${consultantid}' was deleted successfuly`);
     					  },
      			error => {
        					this._notificationService.error(
          					'Error',
          					'An error occured when trying to reach the server');
      					  });
  	})
  }

  goToConsultantForm(consultantid) {
    this._router.navigate(['./consultant-form', consultantid]);
  }

  deleteConfirmation = (consultantid) => {
    const dialogRef = this.dialog.open(DeleteDialogComponent, {
      data: `consultant: ${consultantid}`
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.deleteConsultant(consultantid);
      }
    });
  }

}
