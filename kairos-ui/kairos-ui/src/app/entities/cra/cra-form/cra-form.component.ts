// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-04-28 ( Time 16:11:30 )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

// Models and services imports
import { Cra } from './../cra.model';
import { CraService } from './../services/cra.service';
import * as _ from 'underscore';

// Pour gestion des listes
import { ListeService } from './../../../entities/liste/services/liste.service';
import { Liste } from './../../../entities/liste/liste.model';

import { Lov } from './../../../common/lov';
import {SelectItem} from 'primeng/api';

@Component({
  selector: 'app-cra-form',
  templateUrl: './cra-form.component.html',
  styleUrls: ['./cra-form.component.css'],
  providers: [DatePipe]
})
export class CraFormComponent extends Lov implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  public title = 'Formulaire Cra';
  public form: FormGroup;

  // Définition des filtres

  public cra: Cra;
  private ids;

  // Définition des LOV

  constructor(
	private _listeService: ListeService,         // Pour gestion des listes
    private _craService: CraService,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService,
    public dialog: MatDialog) {
		super(_listeService,_notificationService);
 	}

  ngOnInit() {
    this.getIdFromRouteParams();
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }

	/* Chargement des LOVs */
  }

  getNewForm = (cra?: Cra) => {
    return {
      craid: [{
          value: (cra ? cra.craid : ''),
          disabled: true
      }],      idconsultant: [
        (cra ? cra.idconsultant : ''),
        Validators.required
      ],
      codeperiode: [
        (cra ? cra.codeperiode : '')
      ],
      commentaire: [
        (cra ? cra.commentaire : '')
      ],
      statut: [
        (cra ? cra.statut : '')
      ],
      datevalidation: [
        (cra ? cra.datevalidation : null)
      ]
    };
  }


  load = () => {
	// Concaténer les ids mais séparé par / et non ,
	var param : String = '';
	
	for (var i=0;i<this.ids.length;i++) {
		param = param + this.ids[i];
		if (i != (this.ids.length-1)) {
			param = param + '/';
		}
	}
    this._craService.get(param).subscribe(
      (cra: Cra) => {
        this.cra = cra;
        this.form = this._formBuilder.group(this.getNewForm(this.cra));
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
 	  },
      () => {
		// Valorisation des filtres
      });
  }

  save = () => {
	// If we didn't get a cra, we are adding a cra
    if (!this.cra) {
      this.add();
    } else { // If we didn't get a cra, we are adding a cra
      this.update();
    }
  }

  add = () => {
    this._craService.create(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', 'Cra added successfuly');
        this._router.navigate(['./cra-form', this.form.value.craid]);
      },
      error => {1
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
	Object.assign(this.cra,this.form.value);
    this._craService.update(this.cra).subscribe(
      result => this._notificationService.success('Success', 'Cra edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  deleteConfirmation = () => {
    if (this.cra.craid) {
      const dialogRef = this.dialog.open(DeleteDialogComponent, {
        data: `cra: ${this.cra.craid}`
      });
      dialogRef.afterClosed().subscribe(result => {
        if (result) {
          this.deleteBadge(this.cra);
        }
      });
    }
  }

  deleteBadge = (cra: Cra): void => {
    // Call delete service
    this._craService.delete(cra).subscribe(
      result => {
        this._router.navigate(['./cra-list']);

        this._notificationService.success(
          'Deleted',
         // `The cra entry with the id(s)='${craid}' was deleted successfuly`);
 		`The cra entry with the id= was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }
}
