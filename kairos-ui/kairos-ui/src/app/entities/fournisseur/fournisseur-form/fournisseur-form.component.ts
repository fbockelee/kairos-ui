// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-04-28 ( Time 16:11:35 )

// Modules imports
import { NotificationService } from './../../../services/notification.service';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { MatDialog } from '@angular/material';
import { ActivatedRoute, Router } from '@angular/router';
import { Component, OnInit } from '@angular/core';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

// Models and services imports
import { Fournisseur } from './../fournisseur.model';
import { FournisseurService } from './../services/fournisseur.service';
import * as _ from 'underscore';

// Pour gestion des listes
import { ListeService } from './../../../entities/liste/services/liste.service';
import { Liste } from './../../../entities/liste/liste.model';

import { Lov } from './../../../common/lov';
import {SelectItem} from 'primeng/api';

@Component({
  selector: 'app-fournisseur-form',
  templateUrl: './fournisseur-form.component.html',
  styleUrls: ['./fournisseur-form.component.css'],
  providers: [DatePipe]
})
export class FournisseurFormComponent extends Lov implements OnInit {

  // HTTP status code
  readonly NOT_FOUND_ERROR = 404;
  readonly CONFLICT_ERROR = 409;
  readonly INTERNAL_SERVER_ERROR = 500;

  public title = 'Formulaire Fournisseur';
  public form: FormGroup;

  // Définition des filtres
  public filter_contratfournisseur:string;

  public fournisseur: Fournisseur;
  private ids;

  // Définition des LOV

  constructor(
	private _listeService: ListeService,         // Pour gestion des listes
    private _fournisseurService: FournisseurService,
    private _route: ActivatedRoute,
    private _router: Router,
    private _formBuilder: FormBuilder,
    private _notificationService: NotificationService,
    public dialog: MatDialog) {
		super(_listeService,_notificationService);
 	}

  ngOnInit() {
    this.getIdFromRouteParams();
    this.initForm();
  }

  getIdFromRouteParams = () => {
    this._route.params.subscribe(p => {
        this.ids = _.values(p);
    });
  }

  initForm = () => {
    this.form = this._formBuilder.group(this.getNewForm());
    if (!_.isEmpty(this.ids)) {
      this.load();
    }

	/* Chargement des LOVs */
  }

  getNewForm = (fournisseur?: Fournisseur) => {
    return {
      fournisseurid: [{
          value: (fournisseur ? fournisseur.fournisseurid : ''),
          disabled: true
      }],      raisonsociale: [
        (fournisseur ? fournisseur.raisonsociale : '')
      ],
      adresse1: [
        (fournisseur ? fournisseur.adresse1 : '')
      ],
      adresse2: [
        (fournisseur ? fournisseur.adresse2 : '')
      ],
      contact1: [
        (fournisseur ? fournisseur.contact1 : '')
      ],
      tel1Portable: [
        (fournisseur ? fournisseur.tel1Portable : '')
      ],
      tel1Travail: [
        (fournisseur ? fournisseur.tel1Travail : '')
      ],
      tel1Domicile: [
        (fournisseur ? fournisseur.tel1Domicile : '')
      ],
      contact2: [
        (fournisseur ? fournisseur.contact2 : '')
      ],
      tel2Portable: [
        (fournisseur ? fournisseur.tel2Portable : '')
      ],
      tel2Travail: [
        (fournisseur ? fournisseur.tel2Travail : '')
      ],
      tel2Domicile: [
        (fournisseur ? fournisseur.tel2Domicile : '')
      ],
      trigramme: [
        (fournisseur ? fournisseur.trigramme : '')
      ]
    };
  }


  load = () => {
	// Concaténer les ids mais séparé par / et non ,
	var param : String = '';
	
	for (var i=0;i<this.ids.length;i++) {
		param = param + this.ids[i];
		if (i != (this.ids.length-1)) {
			param = param + '/';
		}
	}
    this._fournisseurService.get(param).subscribe(
      (fournisseur: Fournisseur) => {
        this.fournisseur = fournisseur;
        this.form = this._formBuilder.group(this.getNewForm(this.fournisseur));
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
 	  },
      () => {
		// Valorisation des filtres
		this.filter_contratfournisseur = JSON.stringify([{key: 'idfournisseur', value: this.fournisseur.fournisseurid},]);
      });
  }

  save = () => {
	// If we didn't get a fournisseur, we are adding a fournisseur
    if (!this.fournisseur) {
      this.add();
    } else { // If we didn't get a fournisseur, we are adding a fournisseur
      this.update();
    }
  }

  add = () => {
    this._fournisseurService.create(this.form.value).subscribe(
      result => {
        this._notificationService.success('Success', 'Fournisseur added successfuly');
        this._router.navigate(['./fournisseur-form', this.form.value.fournisseurid]);
      },
      error => {1
        if (error.status === this.CONFLICT_ERROR) {
          this._notificationService.error(error.statusText, 'Id already used in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  update = () => {
	Object.assign(this.fournisseur,this.form.value);
    this._fournisseurService.update(this.fournisseur).subscribe(
      result => this._notificationService.success('Success', 'Fournisseur edited successfuly'),
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }

  deleteConfirmation = () => {
    if (this.fournisseur.fournisseurid) {
      const dialogRef = this.dialog.open(DeleteDialogComponent, {
        data: `fournisseur: ${this.fournisseur.fournisseurid}`
      });
      dialogRef.afterClosed().subscribe(result => {
        if (result) {
          this.deleteBadge(this.fournisseur);
        }
      });
    }
  }

  deleteBadge = (fournisseur: Fournisseur): void => {
    // Call delete service
    this._fournisseurService.delete(fournisseur).subscribe(
      result => {
        this._router.navigate(['./fournisseur-list']);

        this._notificationService.success(
          'Deleted',
         // `The fournisseur entry with the id(s)='${fournisseurid}' was deleted successfuly`);
 		`The fournisseur entry with the id= was deleted successfuly`);
      },
      error => {
        if (error.status === this.NOT_FOUND_ERROR) {
          this._notificationService.error(error.statusText, 'Entity not found in database');
        } else if (error.status === this.INTERNAL_SERVER_ERROR) {
          this._notificationService.error(error.statusText, error.json());
        } else {
          this._notificationService.error('Error', 'An error occured when trying to reach the server');
        }
      });
  }
}
