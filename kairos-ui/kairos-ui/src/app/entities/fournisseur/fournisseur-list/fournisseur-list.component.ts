// File generated by Telosys Tools Generator ( version 3.1.2 ) - Date 2020-04-14 ( Time 11:35:54 )

// Modules imports
import { Component, OnInit, OnChanges, Input } from '@angular/core';
import { Router } from '@angular/router';
import { MatDialog } from '@angular/material';

// Services imports
import { EmitterService } from './../../../services/emitter.service';
import { NotificationService } from './../../../services/notification.service';
import { FournisseurService } from './../services/fournisseur.service';
import { ApplicationStateService } from './../../../services/application-state.service';

// Models imports
import { Fournisseur } from '../fournisseur.model';

// Components imports
import { DeleteDialogComponent } from './../../../delete-dialog/delete-dialog.component';

import { DatePipe } from '@angular/common';

// Ajout primeng
import {TableModule} from 'primeng/table';
import {PaginatorModule} from 'primeng/paginator';

@Component({
  selector: 'app-fournisseur-list',
  templateUrl: './fournisseur-list.component.html',
  styleUrls: ['./fournisseur-list.component.css'],
  providers: [DatePipe]
})
export class FournisseurListComponent implements OnInit, OnChanges {

  public title = 'Liste de Fournisseurs';

  public listOfFournisseurs: Fournisseur[];
  private listId = 'FOURNISSEUR_COMPONENT_LIST';

  private fournisseur: Fournisseur;

  private columnDefinitions = [
	];

  constructor(
    private _fournisseurService: FournisseurService,
    private _router: Router,
    private _notificationService: NotificationService,
    public dialog: MatDialog) { }

  ngOnInit() {
    // On init get all Fournisseurs
    this.getAllFournisseurs();

    // Listen to the 'list' emitted event so as populate the model with the event payload
    // Refresh Fournisseur list
    EmitterService.get(this.listId).subscribe((data: Fournisseur[]) => this.getAllFournisseurs());
  }

  ngOnChanges() { }


  /**
   * Get displayed columns (responsive)
   */
  getDisplayedColumns(): string[] {
	  const isMobile = ApplicationStateService.getIsMobileResolution();
	  return this.columnDefinitions
	    .filter(cd => !isMobile || cd.showMobile)
	    .map(cd => cd.def);
	}

  /**
   * Get all Fournisseur using the service FournisseurService
   */
  getAllFournisseurs = (): void => {
    this._fournisseurService.getAll({ notPaged: true }).subscribe(
      (data: Fournisseur[]) => {
        this.listOfFournisseurs = data;
      },
      error => {
        this._notificationService.error(
          'Error',
          'An error occured when trying to reach the server');
    });
  }

  editFournisseur = (fournisseurid): void => {
    // Navigate to fournisseur form component
    this.goToFournisseurForm(fournisseurid);
  }

  deleteFournisseur = (fournisseurid): void => {

    const promise = new Promise((resolve, reject) => {
		// Call get service
		this._fournisseurService.get(fournisseurid).subscribe(
        		(fournisseur: Fournisseur) => {
          							this.fournisseur = fournisseur;
          							resolve('done');
        						},
				error => {
          					this._notificationService.error(error.statusText, 'Error delete');
            				reject('error');
        				 });
	})
    .then(() => {
    	// Call delete service
    	this._fournisseurService.delete(this.fournisseur).subscribe(
      			result => {
       						 // Notify Fournisseur list to refresh
        					EmitterService.get(this.listId).emit(result);

        					this._notificationService.success(
          					'Deleted',
          					`The fournisseur entry with the id='${fournisseurid}' was deleted successfuly`);
     					  },
      			error => {
        					this._notificationService.error(
          					'Error',
          					'An error occured when trying to reach the server');
      					  });
  	})
  }

  goToFournisseurForm(fournisseurid) {
    this._router.navigate(['./fournisseur-form', fournisseurid]);
  }

  deleteConfirmation = (fournisseurid) => {
    const dialogRef = this.dialog.open(DeleteDialogComponent, {
      data: `fournisseur: ${fournisseurid}`
    });
    dialogRef.afterClosed().subscribe(result => {
      if (result) {
        this.deleteFournisseur(fournisseurid);
      }
    });
  }

}
